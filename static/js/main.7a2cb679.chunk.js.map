{"version":3,"sources":["Weather.js","Form.js","assets/stars.jpg","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","tempCelsius","tempMin","tempMax","description","Form","error","role","onSubmit","loadWeather","type","name","autoComplete","placeholder","App","getWeather","event","a","preventDefault","target","elements","value","country","fetch","apiCall","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","temp_max","temp_min","weather","getWeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","style","backgroundImage","stars","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a2cb679.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n\treturn(\r\n\t\t<div className = \"container text-light\">\r\n\t\t <div className = 'cards pt-5'>\r\n\t\t \t<h1> {props.city} </h1>\r\n\t\t \t<h5 className = 'py-4'>\r\n              <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n\t\t    </h5>\r\n\t\t    {props.tempCelsius ? (<h1 className = 'py-2'> {props.tempCelsius}&deg; </h1>): null}\r\n\t\t    {minmaxTemp(props.tempMin, props.tempMax)}\r\n\t\t    <h4 className = 'py-3'>{props.description}</h4>\r\n\t\t </div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nfunction minmaxTemp(min, max){\r\n\tif(min && max){\r\n\t  return(\r\n\t\t<h3>\r\n\t\t<span className = 'px-4'> {min}&deg; </span>\r\n\t\t<span className = 'px-4'> {max}&deg; </span>\r\n\t    </h3>\r\n\t  );\r\n\t}\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = props => {\r\n\treturn(\r\n\t\t<div className= 'container'>\r\n\t\t <div>{props.error ? error() : null}</div>\r\n\t\t  <form onSubmit={props.loadWeather}>\r\n\t\t      <div className='row'>\r\n\t\t        <div className='col-md-3 offset-md-2'>\r\n\t\t          <input \r\n\t\t           type= 'text' \r\n\t\t           className='form-control' \r\n\t\t           name='city'\r\n\t\t           autoComplete='off'\r\n\t\t           placeholder='city'/>\r\n\t\t        </div>\r\n\t\t        <div className='col-md-3'>\r\n\t\t          <input \r\n\t\t           type= 'text' \r\n\t\t           className='form-control' \r\n\t\t           name='country' \r\n\t\t           autoComplete='off'\r\n\t\t           placeholder='country'/>\r\n\t\t        </div>\r\n\t\t        <div className='col-md-3 mt-md-0 py-3 text-md-left'>\r\n                  <button className='btn btn-dark'>Get Weather</button>\r\n\t\t        </div>\r\n\t\t      </div>\r\n\t\t  </form>\r\n\t    </div>\r\n\t);\r\n \r\n};\r\n\r\nfunction error(){\r\n\treturn(\r\n\t\t<div className=\"alert alert-danger mx-5\" role='alert'>\r\n\t\t Please Enter City And Country\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Form;","export default __webpack_public_path__ + \"static/media/stars.2362aff9.jpg\";","import React from 'react';\nimport Weather from './Weather';\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from './Form';\nimport './App.css';\nimport stars from \"./assets/stars.jpg\";\n\nconst apiKey = '478673cdf5e3e079efaec584e509fbfc';\n\nclass App extends React.Component {\n  constructor (){\n    super();\n    this.state = {\n      city : undefined,\n      country : undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      description: '',\n      error: false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: 'wi-thunderstorm',\n      Drizzle: 'wi-sleet',\n      Rain: 'wi-storm-showers',\n      Snow: 'wi-snow',\n      Atmosphere: 'wi-fog',\n      Clear: 'wi-day-sunny',\n      Clouds: 'wi-day-fog'\n    };\n  }\n\n  calCelsius(temp){\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n\n  getWeatherIcon(icons, rangeId){\n    switch(true){\n      case rangeId >= 200 && rangeId <= 232:\n      this.setState({icon:this.weatherIcon.Thunderstorm});\n      break;\n      case rangeId >= 300 && rangeId <= 321:\n      this.setState({icon:this.weatherIcon.Drizzle});\n      break;\n      case rangeId >= 500 && rangeId <= 531:\n      this.setState({icon:this.weatherIcon.Rain});\n      break;\n      case rangeId >= 600 && rangeId <= 622:\n      this.setState({icon:this.weatherIcon.Snow});\n      break;\n      case rangeId >= 701 && rangeId <= 781:\n      this.setState({icon:this.weatherIcon.Atmosphere});\n      break;\n      case rangeId === 800:\n      this.setState({icon:this.weatherIcon.Clear});\n      break;\n       case rangeId >= 801 && rangeId <= 804:\n      this.setState({icon:this.weatherIcon.Clouds});\n      break;\n      default:\n       this.setState({icon:this.weatherIcon.Clouds});\n    }\n  }\n\n  getWeather = async (event) => {\n    event.preventDefault();\n    const city = event.target.elements.city.value;\n    const country = event.target.elements.country.value;\n   \n    if (city && country){  \n      const apiCall = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}`);\n      const response = await apiCall.json();\n      console.log(response);\n\n    //updating the state\n      this.setState({\n        city : `${response.name}, ${response.sys.country}`,\n        celsius: this.calCelsius(response.main.temp),\n        tempMax: this.calCelsius(response.main.temp_max),\n        tempMin: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error : false\n       });\n      \n       this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\n       \n       }else{\n        this.setState({error:true});\n       }\n    };\n\n  render(){\n    return(\n        <div className=\"App\" style={{backgroundImage: `url(${stars})`}}>\n          <Form loadWeather={this.getWeather} error ={this.state.error}/>\n          <Weather \n          city= {this.state.city} \n          country= {this.state.country}\n          tempCelsius= {this.state.celsius}\n          tempMax = {this.state.tempMax}\n          tempMin = {this.state.tempMin}\n          description = {this.state.description}\n          weatherIcon = {this.state.icon}\n          />\n        </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}